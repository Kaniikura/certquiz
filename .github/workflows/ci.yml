name: Fast CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: write  # Required for cache uploads

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Optimize Bun performance
  BUN_JSC_forceRAMSize: 2048

jobs:
  # Quick lint check for immediate feedback
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "BUN_VERSION=$(bun --version)" >> $GITHUB_ENV

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome lint and format check
        run: |
          bun run lint:check
          bun run format:check

      - name: TypeScript type check (root)
        run: bun run typecheck

  # Matrix testing using vitest projects
  test:
    name: Test (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: lint  # Ensure lint passes before running tests
    
    # No services needed - testcontainers will handle everything!
    
    strategy:
      matrix:
        include:
          - test-type: unit
            command: test:unit
            description: API Unit Tests
          - test-type: integration
            command: test:integration
            description: API Integration Tests
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "BUN_VERSION=$(bun --version)" >> $GITHUB_ENV

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ${{ matrix.description }}
        run: bun run ${{ matrix.command }}
        env:
          VITEST_MAX_THREADS: 4
          # Test environment
          NODE_ENV: test
          # Mock required env vars for tests (these are validated by env.ts)
          # Testcontainers will set DATABASE_URL, DATABASE_URL_TEST, and REDIS_URL automatically
          KEYCLOAK_URL: http://localhost:8080
          KEYCLOAK_REALM: certquiz
          JWT_SECRET: test-jwt-secret-at-least-16-chars
          BMAC_WEBHOOK_SECRET: test-webhook-secret

  # Docker build and smoke test
  docker-build:
    name: Docker Build & Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build shared packages
        run: |
          cd packages/shared
          if [ -f "package.json" ] && bun run --silent build 2>/dev/null; then
            echo "‚úÖ Built shared package"
          fi


      - name: Build API Docker image
        run: |
          docker build -t certquiz/api:ci -f apps/api/Dockerfile .

      - name: Start API container for smoke test
        run: |
          # Start container with smoke test configuration
          # Uses CACHE_DRIVER=memory for lightweight testing (no external dependencies)
          docker run -d --name api-test -p 4000:4000 \
            -e DATABASE_URL="postgres://postgres:postgres@localhost:5432/certquiz_test" \
            -e REDIS_URL="redis://localhost:6379" \
            -e CACHE_DRIVER="memory" \
            -e KEYCLOAK_URL="http://localhost:8080" \
            -e KEYCLOAK_REALM="certquiz" \
            -e JWT_SECRET="test-jwt-secret-at-least-16-chars" \
            -e BMAC_WEBHOOK_SECRET="test-webhook-secret" \
            -e NODE_ENV="test" \
            certquiz/api:ci

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -f http://localhost:4000/health 2>/dev/null; then
              echo "‚úÖ API health check passed"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå API failed to start within 30 seconds"
              docker logs api-test
              exit 1
            fi
            echo "Attempt $i/30: API not ready yet, waiting..."
            sleep 2
          done

      - name: Cleanup
        if: always()
        run: |
          docker stop api-test || true
          docker rm api-test || true

  # Dependency security scan (lightweight)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run dependency audit
        run: |
          # Run bun audit and check for vulnerabilities
          echo "üîç Checking for dependency vulnerabilities..."
          
          # Run bun audit and capture output
          if bun audit 2>&1 | tee audit-output.txt; then
            # Check if there are any moderate or higher vulnerabilities
            if grep -q "moderate\|high\|critical" audit-output.txt; then
              echo "‚ùå Found vulnerabilities that need attention"
              # For now, don't fail the build for known vulnerabilities
              echo "‚ö†Ô∏è Continuing despite vulnerabilities (to be fixed later)"
              exit 0
            else
              echo "‚úÖ No critical vulnerabilities found"
            fi
          else
            echo "‚úÖ Bun audit completed"
          fi

  # Summary job - required for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed!"
            exit 0
          else
            echo "‚ùå Some CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Docker Build: ${{ needs.docker-build.result }}"
            exit 1
          fi