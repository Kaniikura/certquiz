name: Fast CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: write  # Required for cache uploads

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Optimize Bun performance
  BUN_JSC_forceRAMSize: 2048

jobs:
  # Quick lint check for immediate feedback
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "BUN_VERSION=$(bun --version)" >> $GITHUB_ENV

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Biome lint and format check
        run: |
          bun run lint:check
          bun run format:check

      - name: TypeScript type check (root)
        run: bun run typecheck

  # Matrix testing for each workspace
  test:
    name: Test (${{ matrix.workspace }})
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: lint  # Ensure lint passes before running tests
    strategy:
      matrix:
        include:
          - workspace: api
            path: apps/api
          - workspace: web
            path: apps/web
          - workspace: shared
            path: packages/shared
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Get Bun version for cache key
        id: bun-version
        run: echo "BUN_VERSION=$(bun --version)" >> $GITHUB_ENV

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run fast unit tests (no coverage)
        run: |
          cd "${{ matrix.path }}"
          if [ -f "package.json" ]; then
            # Skip E2E tests and coverage for speed
            bun test --exclude="**/*.e2e.test.ts" --reporter=dot --run
          else
            echo "No package.json found, skipping tests for ${{ matrix.workspace }}"
          fi
        env:
          VITEST_MAX_THREADS: 4

  # Docker build and smoke test
  docker-build:
    name: Docker Build & Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build shared packages
        run: |
          cd packages/shared
          if [ -f "package.json" ] && bun run --silent build 2>/dev/null; then
            echo "✅ Built shared package"
          fi

      - name: Check if API Dockerfile exists
        id: dockerfile-check
        run: |
          if [ -f "apps/api/Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No Dockerfile found for API, creating basic one for CI testing"
          fi

      - name: Create temporary Dockerfile for CI (if needed)
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'false'
        run: |
          mkdir -p apps/api
          cat > apps/api/Dockerfile << 'EOF'
          FROM oven/bun:1-alpine
          WORKDIR /app
          COPY package.json bun.lockb ./
          COPY packages/shared packages/shared/
          COPY apps/api apps/api/
          RUN bun install --frozen-lockfile
          WORKDIR /app/apps/api
          EXPOSE 4000
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:4000/health || exit 1
          CMD ["bun", "run", "src/index.ts"]
          EOF

      - name: Build API Docker image
        run: |
          docker build -t certquiz/api:ci -f apps/api/Dockerfile .

      - name: Start API container for smoke test
        run: |
          docker run -d --name api-test -p 4000:4000 \
            -e NODE_ENV=test \
            certquiz/api:ci

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -f http://localhost:4000/health 2>/dev/null; then
              echo "✅ API health check passed"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ API failed to start within 30 seconds"
              docker logs api-test
              exit 1
            fi
            echo "Attempt $i/30: API not ready yet, waiting..."
            sleep 2
          done

      - name: Cleanup
        if: always()
        run: |
          docker stop api-test || true
          docker rm api-test || true

  # Dependency security scan (lightweight)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run dependency audit
        run: |
          # Use bun's built-in audit (if available) or npm audit
          if bun audit 2>/dev/null; then
            echo "✅ Bun audit passed"
          else
            echo "⚠️ Bun audit not available, using npm audit"
            npx audit-ci --moderate
          fi

  # Summary job - required for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Docker Build: ${{ needs.docker-build.result }}"
            exit 1
          fi