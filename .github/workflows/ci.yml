name: Fast CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  actions: write # Required for cache uploads

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Optimize Bun performance
  BUN_JSC_forceRAMSize: 2048

jobs:
  # Quick lint check for immediate feedback
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun and Install Dependencies
        uses: ./.github/actions/setup-bun

      - name: Run quality checks (TypeScript + Biome + knip)
        run: bun run ci

  # Matrix testing using vitest projects
  test:
    name: Test (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: lint # Ensure lint passes before running tests

    # No services needed - testcontainers will handle everything!

    strategy:
      matrix:
        include:
          - test-type: unit
            command: test:api:unit
            description: API Unit Tests
          - test-type: integration
            command: test:api:integration
            description: API Integration Tests
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun and Install Dependencies
        uses: ./.github/actions/setup-bun

      - name: Run ${{ matrix.description }}
        run: bun run ${{ matrix.command }}
        env:
          VITEST_MAX_THREADS: 4
          # Test environment
          NODE_ENV: test
          # Mock required env vars for tests (these are validated by env.ts)
          # Testcontainers will set DATABASE_URL, DATABASE_URL_TEST, and REDIS_URL automatically
          KEYCLOAK_URL: http://localhost:8080
          KEYCLOAK_REALM: certquiz
          JWT_SECRET: test-jwt-secret-at-least-16-chars
          BMAC_WEBHOOK_SECRET: test-webhook-secret

  # Docker build and smoke test
  docker-build:
    name: Docker Build & Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun and Install Dependencies
        uses: ./.github/actions/setup-bun

      - name: Build shared packages
        run: |
          cd packages/shared
          if [ -f "package.json" ] && bun run --silent build 2>/dev/null; then
            echo "‚úÖ Built shared package"
          fi

      - name: Build API Docker image
        run: |
          docker build -t certquiz/api:ci -f apps/api/Dockerfile .

      - name: Start API container for smoke test
        run: |
          # Start container with smoke test configuration
          # Uses CACHE_DRIVER=memory for lightweight testing (no external dependencies)
          docker run -d --name api-test -p 4000:4000 \
            -e API_PORT="4000" \
            -e DATABASE_URL="postgres://postgres:postgres@localhost:5432/certquiz_test" \
            -e REDIS_URL="redis://localhost:6379" \
            -e CACHE_DRIVER="memory" \
            -e KEYCLOAK_URL="http://localhost:8080" \
            -e KEYCLOAK_REALM="certquiz" \
            -e JWT_SECRET="test-jwt-secret-at-least-16-chars" \
            -e BMAC_WEBHOOK_SECRET="test-webhook-secret" \
            -e NODE_ENV="test" \
            certquiz/api:ci

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to start..."
          # Use /health/live for smoke test as it doesn't check external dependencies
          for i in {1..10}; do
            if curl -f http://localhost:4000/health/live 2>/dev/null; then
              echo "‚úÖ API health check passed"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå API failed to start within 10 seconds"
              docker logs api-test
              exit 1
            fi
            echo "Attempt $i/10: API not ready yet, waiting..."
            sleep 1
          done

      - name: Cleanup
        if: always()
        run: |
          docker stop api-test || true
          docker rm api-test || true

  # Dependency security scan (lightweight)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun and Install Dependencies
        uses: ./.github/actions/setup-bun

      - name: Run dependency audit
        run: |
          # Run bun audit and check for vulnerabilities
          echo "üîç Checking for dependency vulnerabilities..."

          # Run bun audit and capture output
          if bun audit 2>&1 | tee audit-output.txt; then
            # Check if there are any moderate or higher vulnerabilities
            if grep -q "moderate\|high\|critical" audit-output.txt; then
              echo "‚ùå Found vulnerabilities that need attention"
              # For now, don't fail the build for known vulnerabilities
              echo "‚ö†Ô∏è Continuing despite vulnerabilities (to be fixed later)"
              exit 0
            else
              echo "‚úÖ No critical vulnerabilities found"
            fi
          else
            echo "‚úÖ Bun audit completed"
          fi

  # E2E tests with Playwright
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, test]  # Run after unit/integration tests pass
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: e2e_user
          POSTGRES_PASSWORD: e2e_pass
          POSTGRES_DB: certquiz_e2e
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 2s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun and Install Dependencies
        uses: ./.github/actions/setup-bun

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        run: |
          cd apps/web
          bunx playwright install chromium --with-deps

      - name: Build shared packages
        run: |
          if [ -d "packages/shared" ] && [ -f "packages/shared/package.json" ]; then
            cd packages/shared
            bun run build || true
          fi

      - name: Start API server
        run: |
          cd apps/api
          bun run start:dev &
          echo $! > /tmp/api.pid
        env:
          NODE_ENV: test
          API_PORT: 4001
          DATABASE_URL: postgresql://e2e_user:e2e_pass@localhost:5433/certquiz_e2e
          CACHE_DRIVER: memory
          KEYCLOAK_URL: http://localhost:8081
          KEYCLOAK_REALM: certquiz-e2e
          JWT_SECRET: e2e-test-jwt-secret-at-least-32-chars
          BMAC_WEBHOOK_SECRET: e2e-test-webhook-secret

      - name: Run database migrations
        run: |
          cd apps/api
          bun run db:migrate
        env:
          DATABASE_URL: postgresql://e2e_user:e2e_pass@localhost:5433/certquiz_e2e

      - name: Start Web UI server
        run: |
          cd apps/web
          bun run dev &
          echo $! > /tmp/web.pid
        env:
          PUBLIC_API_URL: http://localhost:4001

      - name: Wait for services
        run: |
          chmod +x scripts/wait-for-e2e-services.sh
          ./scripts/wait-for-e2e-services.sh 60
        env:
          CI: true

      - name: Run E2E tests
        run: |
          cd apps/web
          bun run test:e2e
        env:
          CI: true
          PLAYWRIGHT_API_URL: http://localhost:4001

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 7

      - name: Upload test traces
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: apps/web/test-results/
          retention-days: 7

      - name: Stop services
        if: always()
        run: |
          if [ -f /tmp/api.pid ]; then
            kill $(cat /tmp/api.pid) || true
          fi
          if [ -f /tmp/web.pid ]; then
            kill $(cat /tmp/web.pid) || true
          fi

  # Summary job - required for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, e2e-tests]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docker-build.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "‚úÖ All CI checks passed!"
            exit 0
          else
            echo "‚ùå Some CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Docker Build: ${{ needs.docker-build.result }}"
            echo "  E2E Tests: ${{ needs.e2e-tests.result }}"
            exit 1
          fi
