/**
 * Shared test keys utility
 * @fileoverview Utility to load shared RSA keys generated by global setup
 */

import { readFile } from 'node:fs/promises';
import { join } from 'node:path';
import { importJWK } from 'jose';
import type { SharedTestKeys } from './global-integration.setup';

const KEYS_FILE_PATH = join(process.cwd(), 'tests/setup/shared-test-keys.json');

let cachedKeys: { privateKey: CryptoKey; publicKey: CryptoKey } | null = null;

/**
 * Load shared test keys generated by global setup
 * Keys are cached to avoid repeated file I/O and JWK imports
 */
export async function getSharedTestKeys(): Promise<{
  privateKey: CryptoKey;
  publicKey: CryptoKey;
}> {
  if (cachedKeys) {
    return cachedKeys;
  }

  try {
    const keysJson = await readFile(KEYS_FILE_PATH, 'utf-8');
    const keys: SharedTestKeys = JSON.parse(keysJson);

    // Import JWK back to CryptoKey objects
    const privateKey = (await importJWK(keys.privateKey, 'RS256')) as CryptoKey;
    const publicKey = (await importJWK(keys.publicKey, 'RS256')) as CryptoKey;

    cachedKeys = { privateKey, publicKey };
    return cachedKeys;
  } catch (error) {
    throw new Error(
      `Failed to load shared test keys. Make sure integration tests are running with globalSetup configured. Error: ${error instanceof Error ? error.message : String(error)}`
    );
  }
}

/**
 * Clear cached keys (mainly for testing this utility itself)
 */
export function clearKeyCache(): void {
  cachedKeys = null;
}
